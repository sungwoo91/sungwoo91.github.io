객체 지향 패턴 중 많이 쓰이는 패턴인 옵저버 패턴에 대해 알아봅니다.

Head First Design Pattern 책에서 참고한 옵저버 패턴의 정의는
> 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로
일대다 의존성을 정의합니다.


예시는 이 [링크]((https://www.quora.com/What-is-Observer-design-pattern))를 보면 알수 있습니다.

> Java에 내장된 Observable, Observer 클래스로 구현 

java.util 패키지안에 Observable 클래스와 Observer 클래스가 있어서 이 클래스들을 이용해 
옵저버 패턴을 구현 할 수 있습니다.

// 구현

하지만 몇가지 문제점이 존재하여 Java9 이후로는 해당 클래스들은 Deprecated 상태입니다.

문제점은 [해당 문서]((https://stackoverflow.com/questions/46380073/observer-is-deprecated-in-java-9-what-should-we-use-instead-of-it?noredirect=1&lq=1))를 참고하면 됩니다.

간단히 요약하면
1. Observable 클래스가 Serializable 을 구현하지 않아 이를 필요로 할 때 쓸수가 없고
2. 누군가 Observable 에 있는 메소드들을 오버라이딩해 Thread-safe 하지 않은 상황이 발생 할 수 있고
3. 마지막으로 Observable 이 인터페이스가 아닌 클래스 여서 확장해서 사용하기 불편합니다.

이 외에도 여러가지 사용하기에 불편한 요소들이 많이 존재하여 더 이상 사용하지 않기로 결정했다고 합니다.

> Java 9 이후로 구현하는 법

java.beans 에 있는 PropertyChangeSupport, PropertyChangeEvent, PropertyChangeListener 로 구현 할 수 있습니다.

Observable은 PropertyChangeSupport 클래스를 멤버변수로 해서 구현 할 수 있고
Observer들은 PropertyChangeListener 인터페이스를 구현해서 만들 수 있습니다.
발생한 변화는 PropertyChangeEvent 로 전달합니다.

자세한 구현은 [해당 글]((https://www.baeldung.com/java-observer-pattern))을 참조하세요.